<?php
namespace Tests\Shared;

use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Connection;
use Illuminate\Database\Schema\Grammars\Grammar;

class SQLliteTesterBlueprint extends Blueprint
{

    public function addColumn($type, $name, array $parameters = [])
    {
        $column = parent::addColumn($type, $name, $parameters);
        $column->nullable();

        // Check if primary key is being updated
        if (isset($parameters['unsigned']) && $parameters['unsigned'] == true) {
            $createCommandExists = false;
            foreach ($this->commands as $command) {
                foreach ($command->getAttributes() as $attribute) {
                    if ($attribute == "create" ) {
                        $createCommandExists = true;
                    }
                }
            }
            if (!$createCommandExists) {
                // cannot add primary key anymore
                foreach ($this->columns as $index => $colm) {
                    foreach ($colm->getAttributes() as $attribute => $value) {
                        if ($attribute == "name" && $value == $column->getAttributes()["name"]) {
                            unset($this->columns[$index]);
                            $column = parent::addColumn('integer', $value, array_replace($parameters, ['autoIncrement' => false, 'unsigned' => false]));
                            $column->default(1);
                        }
                    }
                }
            }
        }
        return $column;
    }

    public function dropUnique($index)
    {
        if ($index !== "bonus_quarterly_dividend_details_bonuses_summary_id_cw_id_unique") {
            return parent::dropUnique($index); // TODO: Change the autogenerated stub
        } else {
            $test = 21;
        }

    }

    public function build(Connection $connection, Grammar $grammar)
    {
        if ($this->commandsNamed(['dropColumn', 'renameColumn'])->count() > 1) {
            $commands = $this->commands;
            foreach ($commands as $index => $command) {
                if ($command->getAttributes()['name'] == "renameColumn") {
                    $segragatedBlueprint = new SQLliteTesterBlueprint($this->table);
                    $segragatedBlueprint->renameColumn($command->getAttributes()['from'], $command->getAttributes()['to']);
                    $segragatedBlueprint->build($connection, $grammar);
                } else if ($command->getAttributes()['name'] == "dropColumn") {
                    foreach ($command->getAttributes()['columns'] as $column) {
                        $segragatedBlueprint = new SQLliteTesterBlueprint($this->table);
                        $segragatedBlueprint->dropColumn($column);
                        $segragatedBlueprint->build($connection, $grammar);
                    }
                }
                unset($this->commands[$index]);
            }

        }

        return parent::build($connection, $grammar);
    }

}